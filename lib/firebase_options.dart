// File generated by FlutterFire CLI (customized).
// ignore_for_file: type=lint

import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:my_app/src/provider/core/config_provider.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform(configService),
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions currentPlatform(ConfigProvider configProvider) {
    final options = configProvider.config?['firebaseOptions'];
    if (options == null) {
      throw StateError('firebaseOptions not loaded in ConfigProvider');
    }

    if (kIsWeb) return _fromMap(options['web']);

    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return _fromMap(options['android']);
      case TargetPlatform.iOS:
        return _fromMap(options['ios'], ios: true);
      case TargetPlatform.macOS:
        return _fromMap(options['macos'], ios: true);
      case TargetPlatform.windows:
        return _fromMap(options['windows'], webLike: true);
      case TargetPlatform.linux:
        throw UnsupportedError('Linux is not configured.');

      default:
        throw UnsupportedError('Unsupported platform.');
    }
  }

  static FirebaseOptions _fromMap(
    Map<String, dynamic> data, {
    bool ios = false,
    bool webLike = false,
  }) {
    return FirebaseOptions(
      apiKey: data['apiKey'] as String,
      appId: data['appId'] as String,
      messagingSenderId: data['messagingSenderId'] as String,
      projectId: data['projectId'] as String,
      storageBucket: data['storageBucket'] as String?,
      authDomain: webLike ? data['authDomain'] as String? : null,
      measurementId: webLike ? data['measurementId'] as String? : null,
      iosBundleId: ios ? data['iosBundleId'] as String? : null,
    );
  }
}