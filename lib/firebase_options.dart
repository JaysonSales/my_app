// File generated by FlutterFire CLI (customized).
// ignore_for_file: type=lint

import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:my_app/src/provider/core/config_provider.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform(configService),
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions currentPlatform(ConfigService configService) {
    final options = configService.config?['firebaseOptions'];
    if (options == null) {
      throw StateError('firebaseOptions not loaded in ConfigService');
    }

    if (kIsWeb) {
      final web = options['web'] as Map<String, dynamic>;
      return FirebaseOptions(
        apiKey: web['apiKey'] as String,
        appId: web['appId'] as String,
        messagingSenderId: web['messagingSenderId'] as String,
        projectId: web['projectId'] as String,
        authDomain: web['authDomain'] as String,
        storageBucket: web['storageBucket'] as String,
        measurementId: web['measurementId'] as String,
      );
    }

    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        final android = options['android'] as Map<String, dynamic>;
        return FirebaseOptions(
          apiKey: android['apiKey'] as String,
          appId: android['appId'] as String,
          messagingSenderId: android['messagingSenderId'] as String,
          projectId: android['projectId'] as String,
          storageBucket: android['storageBucket'] as String,
        );

      case TargetPlatform.iOS:
        final ios = options['ios'] as Map<String, dynamic>;
        return FirebaseOptions(
          apiKey: ios['apiKey'] as String,
          appId: ios['appId'] as String,
          messagingSenderId: ios['messagingSenderId'] as String,
          projectId: ios['projectId'] as String,
          storageBucket: ios['storageBucket'] as String,
          iosBundleId: ios['iosBundleId'] as String,
        );

      case TargetPlatform.macOS:
        final macos = options['macos'] as Map<String, dynamic>;
        return FirebaseOptions(
          apiKey: macos['apiKey'] as String,
          appId: macos['appId'] as String,
          messagingSenderId: macos['messagingSenderId'] as String,
          projectId: macos['projectId'] as String,
          storageBucket: macos['storageBucket'] as String,
          iosBundleId: macos['iosBundleId'] as String,
        );

      case TargetPlatform.windows:
        final windows = options['windows'] as Map<String, dynamic>;
        return FirebaseOptions(
          apiKey: windows['apiKey'] as String,
          appId: windows['appId'] as String,
          messagingSenderId: windows['messagingSenderId'] as String,
          projectId: windows['projectId'] as String,
          authDomain: windows['authDomain'] as String,
          storageBucket: windows['storageBucket'] as String,
          measurementId: windows['measurementId'] as String,
        );

      case TargetPlatform.linux:
        throw UnsupportedError('Linux is not configured.');

      default:
        throw UnsupportedError('Unsupported platform.');
    }
  }
}
